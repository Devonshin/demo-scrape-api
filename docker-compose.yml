version: '3.8'

services:
  mysql:
    image: mysql:8.4
    container_name: font-ninja-test-technique-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: fontninja@admin@password
      MYSQL_DATABASE: font_ninja_scrapping_db
      MYSQL_USER: font_ninja
      MYSQL_PASSWORD: fontninja@password
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pfontninja@admin@password"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

#  redis:
#    image: redis:7.2-alpine
#    container_name: font-ninja-test-technique-redis
#    restart: unless-stopped
#    ports:
#      - "6379:6379"
#    volumes:
#      - ./redis_data:/data
#    networks:
#      - app-network
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 10s
#    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: local
    container_name: font-ninja-test-technique-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: local
      PORT: 3000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: font_ninja
      DB_PASSWORD: fontninja@password
      DB_NAME: font_ninja_scrapping_db
      DB_SYNC: true
      DB_LOGGING: true
      SCRAPING_INTERVAL: 30
      SCRAPING_MAX_RETRIES: 3
      SCRAPING_TIMEOUT: 10000
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy
#      redis:
#        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health/liveness', (r) => {if(r.statusCode !== 200) throw new Error(r.statusCode)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  app-network:
    driver: bridge
